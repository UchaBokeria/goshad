package ui

// LinkProps defines the properties for the Link component
type LinkProps struct {
	Href      string
	Target    string // _blank, _self, _parent, _top
	Rel       string // noopener, noreferrer, etc.
	Variant   string // default, primary, secondary, accent, neutral, hover, focus
	Size      string // xs, sm, base, lg, xl
	Underline string // none, hover, always
	External  bool   // adds external link styling
	Disabled  bool
	Class     string
}

// Link creates a link component with styling
templ Link(props LinkProps, content templ.Component) {
	if props.Disabled {
		<span class={ getDisabledLinkClasses(props) }>
			@content
		</span>
	} else {
		<a
			href={ props.Href }
			class={ getLinkClasses(props) }
			if props.Target != "" {
				target={ props.Target }
			}
			if props.Rel != "" {
				rel={ props.Rel }
			} else if props.Target == "_blank" || props.External {
				rel="noopener noreferrer"
			}
		>
			@content
			if props.External {
				<svg class="inline w-3 h-3 ml-1" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
					<path d="M11 3a1 1 0 100 2h2.586l-6.293 6.293a1 1 0 101.414 1.414L15 6.414V9a1 1 0 102 0V4a1 1 0 00-1-1h-5z"></path>
					<path d="M5 5a2 2 0 00-2 2v6a2 2 0 002 2h6a2 2 0 002-2v-2a1 1 0 10-2 0v2H5V7h2a1 1 0 000-2H5z"></path>
				</svg>
			}
		</a>
	}
}

// LinkWithText creates a simple text link
templ LinkWithText(props LinkProps, text string) {
	@Link(props, templ.Raw(text))
}

// ButtonLink creates a link styled as a button
templ ButtonLink(props LinkProps, buttonProps ButtonProps, content templ.Component) {
	<a
		href={ props.Href }
		class={ getButtonClasses(buttonProps) }
		if props.Target != "" {
			target={ props.Target }
		}
		if props.Rel != "" {
			rel={ props.Rel }
		} else if props.Target == "_blank" || props.External {
			rel="noopener noreferrer"
		}
		if props.Disabled {
			aria-disabled="true"
		}
	>
		@content
		if props.External {
			<svg class="inline w-4 h-4 ml-2" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
				<path d="M11 3a1 1 0 100 2h2.586l-6.293 6.293a1 1 0 101.414 1.414L15 6.414V9a1 1 0 102 0V4a1 1 0 00-1-1h-5z"></path>
				<path d="M5 5a2 2 0 00-2 2v6a2 2 0 002 2h6a2 2 0 002-2v-2a1 1 0 10-2 0v2H5V7h2a1 1 0 000-2H5z"></path>
			</svg>
		}
	</a>
}

// getLinkClasses returns the appropriate CSS classes for the link
func getLinkClasses(props LinkProps) string {
	classes := "link"
	
	// Variant
	switch props.Variant {
	case "primary":
		classes += " link-primary"
	case "secondary":
		classes += " link-secondary"
	case "accent":
		classes += " link-accent"
	case "neutral":
		classes += " link-neutral"
	case "hover":
		classes += " link-hover"
	case "focus":
		classes += " focus:link"
	}
	
	// Size
	switch props.Size {
	case "xs":
		classes += " text-xs"
	case "sm":
		classes += " text-sm"
	case "base":
		classes += " text-base"
	case "lg":
		classes += " text-lg"
	case "xl":
		classes += " text-xl"
	}
	
	// Underline
	switch props.Underline {
	case "none":
		classes += " no-underline"
	case "hover":
		classes += " no-underline hover:underline"
	case "always":
		classes += " underline"
	}
	
	// Transitions
	classes += " transition-colors duration-200"
	
	if props.Class != "" {
		classes += " " + props.Class
	}
	
	return classes
}

// getDisabledLinkClasses returns the appropriate CSS classes for disabled links
func getDisabledLinkClasses(props LinkProps) string {
	classes := "cursor-not-allowed opacity-50"
	
	// Size
	switch props.Size {
	case "xs":
		classes += " text-xs"
	case "sm":
		classes += " text-sm"
	case "base":
		classes += " text-base"
	case "lg":
		classes += " text-lg"
	case "xl":
		classes += " text-xl"
	}
	
	if props.Class != "" {
		classes += " " + props.Class
	}
	
	return classes
} 