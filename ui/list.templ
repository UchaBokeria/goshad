package ui

// ListProps defines the properties for the List component
type ListProps struct {
	Ordered   bool
	Variant   string // default, disc, decimal, none
	Size      string // xs, sm, base, lg, xl
	Spacing   string // none, tight, normal, loose
	Nested    bool
	Class     string
}

// ListItem represents a single list item
type ListItem struct {
	Content string
	Active  bool
	Disabled bool
	Class   string
}

// List creates a list component (ul or ol)
templ List(props ListProps) {
	if props.Ordered {
		<ol class={ getListClasses(props) }>
			{ children... }
		</ol>
	} else {
		<ul class={ getListClasses(props) }>
			{ children... }
		</ul>
	}
}

// ListWithItems creates a list with predefined items
templ ListWithItems(props ListProps, items []ListItem) {
	if props.Ordered {
		<ol class={ getListClasses(props) }>
			for _, item := range items {
				<li class={ getListItemClasses(item) }>
					{ item.Content }
				</li>
			}
		</ol>
	} else {
		<ul class={ getListClasses(props) }>
			for _, item := range items {
				<li class={ getListItemClasses(item) }>
					{ item.Content }
				</li>
			}
		</ul>
	}
}

// ListItem creates a single list item
templ ListItemComponent(item ListItem) {
	<li class={ getListItemClasses(item) }>
		{ children... }
	</li>
}

// MenuList creates a menu-style list using DaisyUI
templ MenuList(props ListProps) {
	<ul class={ getMenuListClasses(props) }>
		{ children... }
	</ul>
}

// MenuItem creates a menu item
templ MenuItem(item ListItem) {
	<li class={ getMenuItemClasses(item) }>
		{ children... }
	</li>
}

// getListClasses returns the appropriate CSS classes for the list
func getListClasses(props ListProps) string {
	var classes string
	
	switch props.Variant {
	case "disc":
		classes = "list-disc"
	case "decimal":
		classes = "list-decimal"
	case "none":
		classes = "list-none"
	default:
		if props.Ordered {
			classes = "list-decimal"
		} else {
			classes = "list-disc"
		}
	}
	
	// Add padding for list items
	classes += " pl-6"
	
	// Size
	switch props.Size {
	case "xs":
		classes += " text-xs"
	case "sm":
		classes += " text-sm"
	case "base":
		classes += " text-base"
	case "lg":
		classes += " text-lg"
	case "xl":
		classes += " text-xl"
	}
	
	// Spacing
	switch props.Spacing {
	case "none":
		classes += " space-y-0"
	case "tight":
		classes += " space-y-1"
	case "normal":
		classes += " space-y-2"
	case "loose":
		classes += " space-y-4"
	default:
		classes += " space-y-2"
	}
	
	if props.Class != "" {
		classes += " " + props.Class
	}
	
	return classes
}

// getListItemClasses returns the appropriate CSS classes for list items
func getListItemClasses(item ListItem) string {
	classes := ""
	
	if item.Active {
		classes += " text-primary font-medium"
	}
	
	if item.Disabled {
		classes += " text-base-content/40 cursor-not-allowed"
	}
	
	if item.Class != "" {
		classes += " " + item.Class
	}
	
	return classes
}

// getMenuListClasses returns the appropriate CSS classes for menu lists
func getMenuListClasses(props ListProps) string {
	classes := "menu"
	
	switch props.Size {
	case "xs":
		classes += " menu-xs"
	case "sm":
		classes += " menu-sm"
	case "lg":
		classes += " menu-lg"
	}
	
	if props.Class != "" {
		classes += " " + props.Class
	}
	
	return classes
}

// getMenuItemClasses returns the appropriate CSS classes for menu items
func getMenuItemClasses(item ListItem) string {
	classes := ""
	
	if item.Active {
		classes += " active"
	}
	
	if item.Disabled {
		classes += " disabled"
	}
	
	if item.Class != "" {
		classes += " " + item.Class
	}
	
	return classes
} 