package ui

// QuoteProps defines the properties for the Quote component
type QuoteProps struct {
	Author    string
	Source    string
	Size      string // xs, sm, base, lg, xl, 2xl, 3xl
	Variant   string // default, bordered, accent
	Italic    bool
	Centered  bool
	Class     string
}

// Quote creates a quote component with styling
templ Quote(props QuoteProps) {
	<blockquote class={ getQuoteClasses(props) }>
		<div class={ getQuoteContentClasses(props) }>
			{ children... }
		</div>
		if props.Author != "" || props.Source != "" {
			<footer class={ getQuoteFooterClasses(props) }>
				if props.Author != "" {
					<cite>{ props.Author }</cite>
				}
				if props.Source != "" {
					if props.Author != "" {
						<span>, </span>
					}
					<span>{ props.Source }</span>
				}
			</footer>
		}
	</blockquote>
}

// QuoteWithText creates a simple text quote
templ QuoteWithText(props QuoteProps, text string) {
	@Quote(props) {
		{ text }
	}
}

// PullQuote creates a pull quote (highlighted quote within content)
templ PullQuote(props QuoteProps) {
	<aside class={ getPullQuoteClasses(props) }>
		<blockquote class={ getQuoteClasses(props) }>
			<div class={ getQuoteContentClasses(props) }>
				{ children... }
			</div>
			if props.Author != "" || props.Source != "" {
				<footer class={ getQuoteFooterClasses(props) }>
					if props.Author != "" {
						<cite>{ props.Author }</cite>
					}
					if props.Source != "" {
						if props.Author != "" {
							<span>, </span>
						}
						<span>{ props.Source }</span>
					}
				</footer>
			}
		</blockquote>
	</aside>
}

// TestimonialQuote creates a testimonial-style quote
templ TestimonialQuote(props QuoteProps) {
	<div class={ getTestimonialQuoteClasses(props) }>
		<div class="flex items-start">
			<svg class="w-8 h-8 text-gray-400 dark:text-gray-600 mr-3 flex-shrink-0" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 18 14">
				<path d="M6 0H2a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h4v1a3 3 0 0 1-3 3H2a1 1 0 0 0 0 2h1a5.006 5.006 0 0 0 5-5V2a2 2 0 0 0-2-2Zm10 0h-4a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h4v1a3 3 0 0 1-3 3h-1a1 1 0 0 0 0 2h1a5.006 5.006 0 0 0 5-5V2a2 2 0 0 0-2-2Z"/>
			</svg>
			<div>
				<div class={ getQuoteContentClasses(props) }>
					{ children... }
				</div>
				if props.Author != "" || props.Source != "" {
					<footer class={ getQuoteFooterClasses(props) }>
						if props.Author != "" {
							<cite>{ props.Author }</cite>
						}
						if props.Source != "" {
							if props.Author != "" {
								<span>, </span>
							}
							<span>{ props.Source }</span>
						}
					</footer>
				}
			</div>
		</div>
	</div>
}

// getQuoteClasses returns the appropriate CSS classes for the quote
func getQuoteClasses(props QuoteProps) string {
	classes := "relative"
	
	switch props.Variant {
	case "bordered":
		classes += " border-l-4 border-primary/30 pl-4"
	case "accent":
		classes += " border-l-4 border-accent pl-4"
	}
	
	if props.Centered {
		classes += " text-center"
	}
	
	if props.Class != "" {
		classes += " " + props.Class
	}
	
	return classes
}

// getQuoteContentClasses returns the appropriate CSS classes for quote content
func getQuoteContentClasses(props QuoteProps) string {
	classes := ""
	
	// Size
	switch props.Size {
	case "xs":
		classes += "text-xs"
	case "sm":
		classes += "text-sm"
	case "base":
		classes += "text-base"
	case "lg":
		classes += "text-lg"
	case "xl":
		classes += "text-xl"
	case "2xl":
		classes += "text-2xl"
	case "3xl":
		classes += "text-3xl"
	default:
		classes += "text-lg"
	}
	
	if props.Italic {
		classes += " italic"
	}
	
	// Quote marks with pseudo-elements
	classes += " before:content-['\"'] after:content-['\"']"
	classes += " before:text-2xl after:text-2xl before:leading-none after:leading-none"
	classes += " before:text-primary/60 after:text-primary/60"
	
	return classes
}

// getQuoteFooterClasses returns the appropriate CSS classes for quote footer
func getQuoteFooterClasses(props QuoteProps) string {
	classes := "mt-2 text-sm text-base-content/70"
	
	if props.Centered {
		classes += " text-center"
	}
	
	return classes
}

// getPullQuoteClasses returns the appropriate CSS classes for pull quotes
func getPullQuoteClasses(props QuoteProps) string {
	classes := "float-right ml-6 mb-4 w-1/3 p-4 bg-base-200 rounded-lg border border-base-300"
	
	if props.Class != "" {
		classes += " " + props.Class
	}
	
	return classes
}

// getTestimonialQuoteClasses returns the appropriate CSS classes for testimonial quotes
func getTestimonialQuoteClasses(props QuoteProps) string {
	classes := "p-6 bg-base-100 rounded-lg shadow-lg border border-base-300"
	
	if props.Class != "" {
		classes += " " + props.Class
	}
	
	return classes
} 