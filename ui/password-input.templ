package ui

import "fmt"

// PasswordInputProps defines the properties for the PasswordInput component
type PasswordInputProps struct {
    Name            string    // Input name attribute
    ID              string    // Input ID
    Placeholder     string    // Placeholder text
    Value           string    // Input value
    Size            string    // xs, sm, md, lg
    Variant         string    // primary, secondary, accent, etc.
    Disabled        bool      // Disable the input
    Required        bool      // Required field
    Class           string    // Additional CSS classes
    ShowToggle      bool      // Show visibility toggle (default: true)
    ShowStrength    bool      // Show password strength indicator
    MinLength       int       // Minimum password length
    Error           bool      // Error state
    ErrorMsg        string    // Error message
    HelperText      string    // Helper text
}

// PasswordInput creates a password input with toggle visibility
templ PasswordInput(props PasswordInputProps) {
    <div class={ getPasswordInputWrapperClasses(props) }>
        <div class="relative">
            <input
                type="password"
                if props.Name != "" {
                    name={ props.Name }
                }
                if props.ID != "" {
                    id={ props.ID }
                } else {
                    id={ getPasswordInputID(props) }
                }
                if props.Placeholder != "" {
                    placeholder={ props.Placeholder }
                }
                if props.Value != "" {
                    value={ props.Value }
                }
                if props.MinLength > 0 {
                    minlength={ fmt.Sprintf("%d", props.MinLength) }
                }
                if props.Required {
                    required
                }
                if props.Disabled {
                    disabled
                }
                class={ getPasswordInputClasses(props) }
                if props.ShowStrength {
                    oninput={ templ.ComponentScript{Call: "updatePasswordStrength('" + getPasswordInputID(props) + "')"} }
                }
            />
            
            if props.ShowToggle {
                <!-- Toggle visibility button -->
                <button
                    type="button"
                    class="absolute inset-y-0 right-0 flex items-center pr-3 text-base-content/60 hover:text-base-content transition-colors"
                    onclick={ templ.ComponentScript{Call: "togglePasswordVisibility('" + getPasswordInputID(props) + "')"} }
                    tabindex="-1"
                >
                    <!-- Eye icon (hidden) -->
                    <svg id={ getPasswordInputID(props) + "_eye_open" } class="w-5 h-5 hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                    </svg>
                    <!-- Eye closed icon (visible) -->
                    <svg id={ getPasswordInputID(props) + "_eye_closed" } class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.878 9.878L3 3m6.878 6.878L21 21"></path>
                    </svg>
                </button>
            }
        </div>
        
        if props.ShowStrength {
            <!-- Password strength indicator -->
            <div class="mt-2 space-y-2">
                <div class="flex space-x-1">
                    <div id={ getPasswordInputID(props) + "_strength_1" } class="h-1 flex-1 bg-base-300 rounded"></div>
                    <div id={ getPasswordInputID(props) + "_strength_2" } class="h-1 flex-1 bg-base-300 rounded"></div>
                    <div id={ getPasswordInputID(props) + "_strength_3" } class="h-1 flex-1 bg-base-300 rounded"></div>
                    <div id={ getPasswordInputID(props) + "_strength_4" } class="h-1 flex-1 bg-base-300 rounded"></div>
                </div>
                <div id={ getPasswordInputID(props) + "_strength_text" } class="text-xs text-base-content/60">
                    Enter a password
                </div>
            </div>
        }
        
        if props.Error && props.ErrorMsg != "" {
            <div class="label">
                <span class="label-text-alt text-error">{ props.ErrorMsg }</span>
            </div>
        } else if props.HelperText != "" {
            <div class="label">
                <span class="label-text-alt text-base-content/60">{ props.HelperText }</span>
            </div>
        }
        
        <!-- JavaScript for functionality -->
        <script>
            document.addEventListener('DOMContentLoaded', function() {
                initPasswordInput('{ getPasswordInputID(props) }', {
                    showToggle: { fmt.Sprintf("%t", props.ShowToggle) },
                    showStrength: { fmt.Sprintf("%t", props.ShowStrength) },
                    minLength: { fmt.Sprintf("%d", props.MinLength) }
                });
            });
        </script>
    </div>
}

// Helper functions

func getPasswordInputID(props PasswordInputProps) string {
    if props.ID != "" {
        return props.ID
    }
    return "password_" + props.Name
}

func getPasswordInputWrapperClasses(props PasswordInputProps) string {
    classes := "password-input-wrapper w-full"
    
    if props.Class != "" {
        classes += " " + props.Class
    }
    
    return classes
}

func getPasswordInputClasses(props PasswordInputProps) string {
    classes := "input input-bordered w-full"
    
    // Add padding for toggle button
    if props.ShowToggle {
        classes += " pr-12"
    }
    
    // Add variant classes
    if props.Error {
        classes += " input-error"
    } else if props.Variant != "" {
        switch props.Variant {
        case "primary":
            classes += " input-primary"
        case "secondary":
            classes += " input-secondary"
        case "accent":
            classes += " input-accent"
        case "info":
            classes += " input-info"
        case "success":
            classes += " input-success"
        case "warning":
            classes += " input-warning"
        }
    }
    
    // Add size classes
    switch props.Size {
    case "xs":
        classes += " input-xs"
    case "sm":
        classes += " input-sm"
    case "lg":
        classes += " input-lg"
    default:
        classes += " input-md"
    }
    
    if props.Disabled {
        classes += " input-disabled"
    }
    
    return classes
} 