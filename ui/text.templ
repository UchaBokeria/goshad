package ui

// TextProps defines the properties for the Text component
type TextProps struct {
	Size      string // xs, sm, base, lg, xl, 2xl, 3xl, 4xl, 5xl, 6xl, 7xl, 8xl, 9xl
	Weight    string // thin, extralight, light, normal, medium, semibold, bold, extrabold, black
	Color     string // text color classes
	Align     string // left, center, right, justify
	Transform string // uppercase, lowercase, capitalize, normal-case
	Leading   string // tight, snug, normal, relaxed, loose
	Tracking  string // tighter, tight, normal, wide, wider, widest
	Family    string // sans, serif, mono
	Italic    bool
	Underline bool
	Truncate  bool
	Wrap      string // normal, nowrap, break-words, break-all
	Class     string
}

// Text creates a text component with styling
templ Text(props TextProps) {
	<span class={ getTextClasses(props) }>
		{ children... }
	</span>
}

// TextWithString creates a simple text component with string content
templ TextWithString(props TextProps, text string) {
	<span class={ getTextClasses(props) }>
		{ text }
	</span>
}

// Paragraph creates a paragraph text component
templ Paragraph(props TextProps) {
	<p class={ getTextClasses(props) }>
		{ children... }
	</p>
}

// ParagraphWithString creates a paragraph with string content
templ ParagraphWithString(props TextProps, text string) {
	<p class={ getTextClasses(props) }>
		{ text }
	</p>
}

// Code creates an inline code text component
templ Code(props TextProps) {
	<code class={ getCodeClasses(props) }>
		{ children... }
	</code>
}

// CodeWithString creates inline code with string content
templ CodeWithString(props TextProps, text string) {
	<code class={ getCodeClasses(props) }>
		{ text }
	</code>
}

// Pre creates a preformatted text component
templ Pre(props TextProps) {
	<pre class={ getPreClasses(props) }>
		{ children... }
	</pre>
}

// PreWithString creates preformatted text with string content
templ PreWithString(props TextProps, text string) {
	<pre class={ getPreClasses(props) }>
		{ text }
	</pre>
}

// Small creates small text component
templ Small(props TextProps) {
	<small class={ getTextClasses(props) }>
		{ children... }
	</small>
}

// Strong creates bold text component
templ Strong(props TextProps) {
	<strong class={ getStrongClasses(props) }>
		{ children... }
	</strong>
}

// Em creates emphasized (italic) text component
templ Em(props TextProps) {
	<em class={ getEmClasses(props) }>
		{ children... }
	</em>
}

// getTextClasses returns the appropriate CSS classes for text
func getTextClasses(props TextProps) string {
	var classes string
	
	// Size
	if props.Size != "" {
		classes = "text-" + props.Size
	}
	
	// Weight
	if props.Weight != "" {
		if classes != "" {
			classes += " "
		}
		classes += "font-" + props.Weight
	}
	
	// Color
	if props.Color != "" {
		if classes != "" {
			classes += " "
		}
		classes += props.Color
	}
	
	// Alignment
	if props.Align != "" {
		if classes != "" {
			classes += " "
		}
		classes += "text-" + props.Align
	}
	
	// Transform
	if props.Transform != "" {
		if classes != "" {
			classes += " "
		}
		classes += props.Transform
	}
	
	// Leading (line height)
	if props.Leading != "" {
		if classes != "" {
			classes += " "
		}
		classes += "leading-" + props.Leading
	}
	
	// Tracking (letter spacing)
	if props.Tracking != "" {
		if classes != "" {
			classes += " "
		}
		classes += "tracking-" + props.Tracking
	}
	
	// Font family
	if props.Family != "" {
		if classes != "" {
			classes += " "
		}
		classes += "font-" + props.Family
	}
	
	// Style modifiers
	if props.Italic {
		if classes != "" {
			classes += " "
		}
		classes += "italic"
	}
	
	if props.Underline {
		if classes != "" {
			classes += " "
		}
		classes += "underline"
	}
	
	if props.Truncate {
		if classes != "" {
			classes += " "
		}
		classes += "truncate"
	}
	
	// Text wrapping
	switch props.Wrap {
	case "nowrap":
		if classes != "" {
			classes += " "
		}
		classes += "whitespace-nowrap"
	case "break-words":
		if classes != "" {
			classes += " "
		}
		classes += "break-words"
	case "break-all":
		if classes != "" {
			classes += " "
		}
		classes += "break-all"
	}
	
	if props.Class != "" {
		if classes != "" {
			classes += " "
		}
		classes += props.Class
	}
	
	return classes
}

// getCodeClasses returns the appropriate CSS classes for code elements
func getCodeClasses(props TextProps) string {
	classes := getTextClasses(props)
	
	// Add default code styling
	baseCodeClasses := "font-mono text-sm bg-base-200 dark:bg-base-300 px-2 py-1 rounded-md"
	
	if classes != "" {
		return baseCodeClasses + " " + classes
	}
	
	return baseCodeClasses
}

// getPreClasses returns the appropriate CSS classes for pre elements
func getPreClasses(props TextProps) string {
	classes := getTextClasses(props)
	
	// Add default pre styling
	basePreClasses := "font-mono text-sm bg-base-200 dark:bg-base-300 p-4 rounded-lg overflow-x-auto border border-base-300"
	
	if classes != "" {
		return basePreClasses + " " + classes
	}
	
	return basePreClasses
}

// getStrongClasses returns the appropriate CSS classes for strong elements
func getStrongClasses(props TextProps) string {
	classes := getTextClasses(props)
	
	// Ensure bold weight is applied
	if props.Weight == "" {
		if classes != "" {
			classes += " font-bold"
		} else {
			classes = "font-bold"
		}
	}
	
	return classes
}

// getEmClasses returns the appropriate CSS classes for em elements
func getEmClasses(props TextProps) string {
	classes := getTextClasses(props)
	
	// Ensure italic is applied
	if !props.Italic {
		if classes != "" {
			classes += " italic"
		} else {
			classes = "italic"
		}
	}
	
	return classes
} 