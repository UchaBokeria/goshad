package ui

// IconProps defines the properties for the Icon component
type IconProps struct {
	Name   string // icon name or class
	Size   string // xs, sm, md, lg, xl, 2xl, 3xl, 4xl, 5xl, 6xl, 7xl, 8xl, 9xl
	Color  string // text color class
	Stroke string // stroke width for outline icons
	Fill   string // fill color for solid icons
	Class  string
}

// Icon creates an icon component wrapper
templ Icon(props IconProps) {
	<svg
		class={ getIconSVGClasses(props) }
		if props.Fill != "" {
			fill={ props.Fill }
		} else {
			fill="currentColor"
		}
		if props.Stroke != "" {
			stroke={ props.Stroke }
		} else {
			stroke="currentColor"
			stroke-width="1.5"
		}
		viewBox="0 0 24 24"
		xmlns="http://www.w3.org/2000/svg"
	>
		{ children... }
	</svg>
}

// IconSVG creates an SVG icon (alias of Icon for backwards compatibility)
templ IconSVG(props IconProps) {
	@Icon(props) {
		{ children... }
	}
}

// IconText creates a text-based icon (for icon fonts like Font Awesome)
templ IconText(props IconProps) {
	<i class={ getIconTextClasses(props) }></i>
}

// Common SVG icons
templ IconChevronDown(props IconProps) {
	@Icon(props) {
		<path stroke-linecap="round" stroke-linejoin="round" d="M19 9l-7 7-7-7"/>
	}
}

templ IconChevronUp(props IconProps) {
	@Icon(props) {
		<path stroke-linecap="round" stroke-linejoin="round" d="M5 15l7-7 7 7"/>
	}
}

templ IconX(props IconProps) {
	@Icon(props) {
		<path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12"/>
	}
}

templ IconCheck(props IconProps) {
	@Icon(props) {
		<path stroke-linecap="round" stroke-linejoin="round" d="M5 13l4 4L19 7"/>
	}
}

templ IconHome(props IconProps) {
	@Icon(props) {
		<path stroke-linecap="round" stroke-linejoin="round" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"/>
	}
}

templ IconUser(props IconProps) {
	@Icon(props) {
		<path stroke-linecap="round" stroke-linejoin="round" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
	}
}

templ IconHeart(props IconProps) {
	@Icon(props) {
		<path stroke-linecap="round" stroke-linejoin="round" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"/>
	}
}

// getIconSVGClasses returns the appropriate CSS classes for SVG icons
func getIconSVGClasses(props IconProps) string {
	classes := ""
	
	// Size
	switch props.Size {
	case "xs":
		classes += "w-3 h-3"
	case "sm":
		classes += "w-4 h-4"
	case "md":
		classes += "w-5 h-5"
	case "lg":
		classes += "w-6 h-6"
	case "xl":
		classes += "w-8 h-8"
	case "2xl":
		classes += "w-10 h-10"
	case "3xl":
		classes += "w-12 h-12"
	case "4":
		classes += "w-4 h-4"
	case "5":
		classes += "w-5 h-5"
	case "6":
		classes += "w-6 h-6"
	case "8":
		classes += "w-8 h-8"
	default:
		classes += "w-5 h-5"
	}
	
	// Color
	if props.Color != "" {
		classes += " " + props.Color
	}
	
	if props.Class != "" {
		classes += " " + props.Class
	}
	
	return classes
}

// getIconTextClasses returns the appropriate CSS classes for text-based icons
func getIconTextClasses(props IconProps) string {
	classes := ""
	
	if props.Name != "" {
		classes = props.Name
	}
	
	// Size for text icons
	switch props.Size {
	case "xs":
		classes += " text-xs"
	case "sm":
		classes += " text-sm"
	case "md":
		classes += " text-base"
	case "lg":
		classes += " text-lg"
	case "xl":
		classes += " text-xl"
	case "2xl":
		classes += " text-2xl"
	case "3xl":
		classes += " text-3xl"
	case "4xl":
		classes += " text-4xl"
	case "5xl":
		classes += " text-5xl"
	case "6xl":
		classes += " text-6xl"
	}
	
	// Color
	if props.Color != "" {
		classes += " " + props.Color
	}
	
	if props.Class != "" {
		classes += " " + props.Class
	}
	
	return classes
} 