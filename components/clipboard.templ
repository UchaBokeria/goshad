package components

// ClipboardProps defines the properties for the Clipboard component
type ClipboardProps struct {
	Text      string // Text to copy
	Label     string // Button label
	Size      string // xs, sm, md, lg
	Variant   string // primary, secondary, accent, etc.
	Icon      bool   // Show copy icon
	Feedback  bool   // Show feedback on copy
	Class     string
}

// Clipboard creates a copy-to-clipboard button
templ Clipboard(props ClipboardProps) {
	<div class="relative">
		<button 
			class={ getClipboardClasses(props) }
			onclick="navigator.clipboard.writeText(this.getAttribute('data-text')).then(() => { if (this.nextElementSibling) { this.nextElementSibling.classList.remove('hidden'); setTimeout(() => this.nextElementSibling.classList.add('hidden'), 2000); } })"
			data-text={ props.Text }
			title="Copy to clipboard"
		>
			if props.Icon {
				<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
				</svg>
			}
			{ props.Label }
		</button>
		if props.Feedback {
			<div class="hidden absolute -top-8 left-1/2 transform -translate-x-1/2 bg-success text-success-content px-2 py-1 rounded text-sm whitespace-nowrap">
				âœ“ Copied!
			</div>
		}
	</div>
}

// ClipboardInput creates a clipboard component with input field
templ ClipboardInput(props ClipboardProps, inputValue string) {
	<div class="flex gap-2">
		<input 
			type="text" 
			value={ inputValue }
			readonly
			class="input input-bordered flex-1"
		/>
		@Clipboard(ClipboardProps{
			Text: inputValue,
			Label: "Copy",
			Size: props.Size,
			Variant: props.Variant,
			Icon: true,
			Feedback: true,
		})
	</div>
}

// Helper functions
func getClipboardClasses(props ClipboardProps) string {
	classes := "btn flex items-center"
	
	switch props.Variant {
	case "primary":
		classes += " btn-primary"
	case "secondary":
		classes += " btn-secondary"
	case "accent":
		classes += " btn-accent"
	case "ghost":
		classes += " btn-ghost"
	case "outline":
		classes += " btn-outline"
	default:
		classes += " btn-primary"
	}
	
	switch props.Size {
	case "xs":
		classes += " btn-xs"
	case "sm":
		classes += " btn-sm"
	case "lg":
		classes += " btn-lg"
	default:
		classes += " btn-md"
	}
	
	if props.Class != "" {
		classes += " " + props.Class
	}
	
	return classes
} 