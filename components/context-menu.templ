package components

// ContextMenuProps defines the properties for the ContextMenu component
type ContextMenuProps struct {
	Items     []ContextMenuItem
	TriggerText string
	Position  string // auto, top, bottom, left, right
	Class     string
}

// ContextMenuItem represents a context menu item
type ContextMenuItem struct {
	Label    string
	Action   string
	Icon     string
	Divider  bool
	Disabled bool
	Danger   bool
}

// ContextMenu creates a context menu component
templ ContextMenu(props ContextMenuProps) {
	<div class="context-menu-container relative">
		<div class="context-menu-trigger cursor-pointer" oncontextmenu="showContextMenu(event)" onclick="hideContextMenu()">
			if props.TriggerText != "" {
				<div class="p-4 border-2 border-dashed border-base-300 rounded-lg text-center">
					<p class="text-base-content/60">{ props.TriggerText }</p>
				</div>
			} else {
				{ children... }
			}
		</div>
		
		<div id="context-menu" class={ getContextMenuClasses(props) }>
			<ul class="menu bg-base-100 border border-base-300 rounded-box shadow-lg p-2 w-48">
				for _, item := range props.Items {
					if item.Divider {
						<li><hr class="my-1"/></li>
					} else {
						<li>
							<a 
								href="#"
								class={ getContextMenuItemClasses(item) }
								onclick={ templ.ComponentScript{Call: "handleContextMenuAction('" + item.Action + "')"} }
							>
								if item.Icon != "" {
									<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
										{ getContextMenuIconPath(item.Icon) }
									</svg>
								}
								{ item.Label }
							</a>
						</li>
					}
				}
			</ul>
		</div>
		
		<script>
			function showContextMenu(event) {
				event.preventDefault();
				const contextMenu = document.getElementById('context-menu');
				if (contextMenu) {
					contextMenu.style.display = 'block';
					contextMenu.style.left = event.pageX + 'px';
					contextMenu.style.top = event.pageY + 'px';
				}
			}
			
			function hideContextMenu() {
				const contextMenu = document.getElementById('context-menu');
				if (contextMenu) {
					contextMenu.style.display = 'none';
				}
			}
			
			function handleContextMenuAction(action) {
				console.log('Context menu action:', action);
				hideContextMenu();
				// Add your action handling logic here
			}
			
			// Hide context menu when clicking outside
			document.addEventListener('click', hideContextMenu);
		</script>
	</div>
}

// Helper functions
func getContextMenuClasses(props ContextMenuProps) string {
	classes := "absolute z-50 hidden"
	
	if props.Class != "" {
		classes += " " + props.Class
	}
	
	return classes
}

func getContextMenuItemClasses(item ContextMenuItem) string {
	classes := "flex items-center gap-2"
	
	if item.Disabled {
		classes += " disabled opacity-50 cursor-not-allowed"
	}
	
	if item.Danger {
		classes += " text-error hover:bg-error hover:text-error-content"
	}
	
	return classes
}

func getContextMenuIconPath(icon string) string {
	switch icon {
	case "copy":
		return `<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"></path>`
	case "cut":
		return `<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.828 14.828a4 4 0 01-5.656 0M9 10h1m4 0h1m-6 4h1m4 0h1m-6-8h8a2 2 0 012 2v8a2 2 0 01-2 2H7a2 2 0 01-2-2V8a2 2 0 012-2z"></path>`
	case "paste":
		return `<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>`
	case "delete":
		return `<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>`
	case "edit":
		return `<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>`
	default:
		return `<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>`
	}
} 