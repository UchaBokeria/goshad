package components

// MenubarProps defines the properties for the Menubar component
type MenubarProps struct {
	Items   []MenubarItem
	Variant string // horizontal, vertical
	Size    string // sm, md, lg
	Class   string
}

// MenubarItem represents a menubar item
type MenubarItem struct {
	Label    string
	Href     string
	Active   bool
	Badge    string
	Icon     string
	Dropdown []MenubarSubItem
	Disabled bool
}

// MenubarSubItem represents a submenu item
type MenubarSubItem struct {
	Label    string
	Href     string
	Icon     string
	Divider  bool
	Disabled bool
}

// Menubar creates a menubar component
templ Menubar(props MenubarProps) {
	<div class={ getMenubarClasses(props) }>
		<ul class={ getMenubarListClasses(props) }>
			for _, item := range props.Items {
				<li class={ getMenubarItemWrapperClasses(item) }>
					if len(item.Dropdown) > 0 {
						<details class="dropdown">
							<summary class={ getMenubarItemClasses(item, props) }>
								if item.Icon != "" {
									<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
										{ getMenubarIconPath(item.Icon) }
									</svg>
								}
								{ item.Label }
								if item.Badge != "" {
									<span class="badge badge-sm">{ item.Badge }</span>
								}
							</summary>
							<ul class="dropdown-content z-[1] menu p-2 shadow bg-base-100 rounded-box w-52">
								for _, subItem := range item.Dropdown {
									if subItem.Divider {
										<li><hr class="my-1"/></li>
									} else {
										<li>
											<a 
												href={ subItem.Href }
												class={ getMenubarSubItemClasses(subItem) }
											>
												if subItem.Icon != "" {
													<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
														{ getMenubarIconPath(subItem.Icon) }
													</svg>
												}
												{ subItem.Label }
											</a>
										</li>
									}
								}
							</ul>
						</details>
					} else {
						<a 
							href={ item.Href }
							class={ getMenubarItemClasses(item, props) }
						>
							if item.Icon != "" {
								<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									{ getMenubarIconPath(item.Icon) }
								</svg>
							}
							{ item.Label }
							if item.Badge != "" {
								<span class="badge badge-sm">{ item.Badge }</span>
							}
						</a>
					}
				</li>
			}
		</ul>
	</div>
}

// MenubarSimple creates a simple horizontal menubar
templ MenubarSimple(items []MenubarItem) {
	<nav class="menubar bg-base-100 border-b border-base-300">
		<div class="container mx-auto px-4">
			<ul class="flex items-center space-x-6 h-12">
				for _, item := range items {
					<li>
						<a 
							href={ item.Href }
							class={ getSimpleMenubarItemClasses(item) }
						>
							{ item.Label }
						</a>
					</li>
				}
			</ul>
		</div>
	</nav>
}

// Helper functions
func getMenubarClasses(props MenubarProps) string {
	classes := "menubar"
	
	switch props.Variant {
	case "vertical":
		classes += " flex flex-col"
	default:
		classes += " flex"
	}
	
	if props.Class != "" {
		classes += " " + props.Class
	}
	
	return classes
}

func getMenubarListClasses(props MenubarProps) string {
	classes := "menu"
	
	switch props.Variant {
	case "vertical":
		classes += " menu-vertical"
	default:
		classes += " menu-horizontal"
	}
	
	switch props.Size {
	case "sm":
		classes += " menu-sm"
	case "lg":
		classes += " menu-lg"
	default:
		classes += " menu-md"
	}
	
	return classes
}

func getMenubarItemWrapperClasses(item MenubarItem) string {
	classes := ""
	
	if item.Disabled {
		classes += " disabled"
	}
	
	return classes
}

func getMenubarItemClasses(item MenubarItem, props MenubarProps) string {
	classes := "flex items-center gap-2"
	
	if item.Active {
		classes += " active"
	}
	
	if item.Disabled {
		classes += " disabled"
	}
	
	return classes
}

func getMenubarSubItemClasses(item MenubarSubItem) string {
	classes := "flex items-center gap-2"
	
	if item.Disabled {
		classes += " disabled"
	}
	
	return classes
}

func getSimpleMenubarItemClasses(item MenubarItem) string {
	classes := "text-base-content hover:text-primary transition-colors font-medium"
	
	if item.Active {
		classes += " text-primary"
	}
	
	if item.Disabled {
		classes += " opacity-50 cursor-not-allowed"
	}
	
	return classes
}

func getMenubarIconPath(icon string) string {
	switch icon {
	case "home":
		return `<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"></path>`
	case "user":
		return `<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>`
	case "settings":
		return `<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"></path><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>`
	case "folder":
		return `<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-6l-2-2H5a2 2 0 00-2 2z"></path>`
	default:
		return `<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>`
	}
} 