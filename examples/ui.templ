package examples

import "github.com/UchaBokeria/goshad/ui"

templ UI() {
    <div class="max-w-7xl mx-auto space-y-8 p-6">
        <!-- Header -->
        <div class="text-center space-y-4 pb-8 border-b-2 border-primary/20">
            <h1 class="text-5xl font-bold text-primary">GoShad UI Components</h1>
            <p class="text-xl text-base-content/70">Built with a-h/templ, Tailwind CSS, and DaisyUI</p>
        </div>

        <!-- Navigation Components -->
        @NavigationSection()
        
        <!-- Form Components -->
        @FormComponentsSection()
        
        <!-- Button Components -->
        @ButtonComponentsSection()
        
        <!-- Data Display -->
        @DataDisplaySection()
        
        <!-- Layout Components -->
        @LayoutComponentsSection()
        
        <!-- Typography -->
        @TypographySection()
        
        <!-- Feedback Components -->
        @FeedbackSection()
        
        <!-- Interactive Components -->
        @InteractiveSection()
    </div>
}

templ NavigationSection() {
    <section class="card bg-gradient-to-br from-base-100 to-base-200 shadow-xl border border-primary/10">
        <div class="card-body">
            <h2 class="card-title text-3xl text-primary mb-6 border-b border-primary/20 pb-2">
                üß≠ Navigation Components
            </h2>
            
            <div class="space-y-8">
                <!-- Links -->
                <div class="space-y-4">
                    <h3 class="text-xl font-semibold text-secondary">Links</h3>
                    <div class="p-4 bg-base-100 rounded-lg border border-base-300 space-y-3">
                        <div class="flex flex-wrap gap-4">
                            @ui.Link(ui.LinkProps{Href: "#", Variant: "primary"}) { Primary Link }
                            @ui.Link(ui.LinkProps{Href: "#", Variant: "secondary"}) { Secondary Link }
                            @ui.Link(ui.LinkProps{Href: "#", Variant: "accent"}) { Accent Link }
                            @ui.Link(ui.LinkProps{Href: "#", Variant: "hover"}) { Hover Link }
                            @ui.Link(ui.LinkProps{Href: "https://example.com", External: true, Target: "_blank"}) { External Link }
                        </div>
                        <div class="flex gap-4">
                            @ui.Link(ui.LinkProps{Href: "#", Size: "xs"}) { Extra Small }
                            @ui.Link(ui.LinkProps{Href: "#", Size: "sm"}) { Small }
                            @ui.Link(ui.LinkProps{Href: "#", Size: "lg"}) { Large }
                            @ui.Link(ui.LinkProps{Href: "#", Size: "xl"}) { Extra Large }
                        </div>
                    </div>
                </div>

                <!-- Tooltips -->
                <div class="space-y-4">
                    <h3 class="text-xl font-semibold text-secondary">Tooltips</h3>
                    <div class="p-4 bg-base-100 rounded-lg border border-base-300">
                        <div class="flex flex-wrap gap-4">
                            @ui.Tooltip(ui.TooltipProps{Text: "This is a tooltip", Position: "top"}) {
                                <button class="btn btn-primary">Top Tooltip</button>
                            }
                            @ui.Tooltip(ui.TooltipProps{Text: "Bottom tooltip", Position: "bottom"}) {
                                <button class="btn btn-secondary">Bottom Tooltip</button>
                            }
                            @ui.Tooltip(ui.TooltipProps{Text: "Left tooltip", Position: "left"}) {
                                <button class="btn btn-accent">Left Tooltip</button>
                            }
                            @ui.Tooltip(ui.TooltipProps{Text: "Right tooltip", Position: "right"}) {
                                <button class="btn btn-info">Right Tooltip</button>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
}

templ FormComponentsSection() {
    <section class="card bg-gradient-to-br from-base-100 to-base-200 shadow-xl border border-secondary/10">
        <div class="card-body">
            <h2 class="card-title text-3xl text-secondary mb-6 border-b border-secondary/20 pb-2">
                üìù Form Components
            </h2>
            
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
                <!-- Input Fields -->
                <div class="space-y-4">
                    <h3 class="text-xl font-semibold text-accent">Input Fields</h3>
                    <div class="p-4 bg-base-100 rounded-lg border border-base-300 space-y-4">
                        <div class="form-control">
                            <label class="label">
                                <span class="label-text font-medium">Default Input</span>
                            </label>
                            @ui.Input(ui.InputProps{
                                Type: "text",
                                Placeholder: "Enter text here",
                                Variant: "bordered",
                                Size: "md",
                            })
                        </div>
                        
                        <div class="form-control">
                            <label class="label">
                                <span class="label-text font-medium">Email Input</span>
                            </label>
                            @ui.Input(ui.InputProps{
                                Type: "email",
                                Placeholder: "user@example.com",
                                Variant: "bordered",
                                Size: "md",
                            })
                        </div>
                        
                        <div class="form-control">
                            <label class="label">
                                <span class="label-text font-medium">Password Input</span>
                            </label>
                            @ui.Input(ui.InputProps{
                                Type: "password",
                                Placeholder: "‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢",
                                Variant: "bordered",
                                Size: "md",
                            })
                        </div>

                        <div class="form-control">
                            <label class="label">
                                <span class="label-text font-medium text-error">Email with Error</span>
                            </label>
                            @ui.Input(ui.InputProps{
                                Type: "email",
                                Placeholder: "invalid-email",
                                Variant: "bordered",
                                Size: "md",
                                Error: true,
                                ErrorMsg: "Please enter a valid email address",
                            })
                        </div>

                        <div class="form-control">
                            <label class="label">
                                <span class="label-text font-medium text-error">Password with Error</span>
                            </label>
                            @ui.Input(ui.InputProps{
                                Type: "password",
                                Placeholder: "‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢",
                                Variant: "bordered",
                                Size: "md",
                                Error: true,
                                ErrorMsg: "Password must be at least 8 characters long",
                            })
                        </div>

                        <div class="form-control">
                            <label class="label">
                                <span class="label-text font-medium">Textarea</span>
                            </label>
                            @ui.Textarea(ui.TextareaProps{
                                Placeholder: "Type your message here...",
                                Variant: "bordered",
                                Rows: 4,
                            })
                        </div>
                    </div>
                </div>

                <!-- Selection & Control Components -->
                <div class="space-y-4">
                    <h3 class="text-xl font-semibold text-accent">Selection & Controls</h3>
                    <div class="p-4 bg-base-100 rounded-lg border border-base-300 space-y-4">
                        <div class="form-control">
                            <label class="label">
                                <span class="label-text font-medium">Select Dropdown</span>
                            </label>
                            @ui.Select(ui.SelectProps{
                                Variant: "bordered",
                                Placeholder: "Choose an option",
                                Size: "md",
                                Options: []ui.SelectOption{
                                    {Value: "option1", Label: "Option 1"},
                                    {Value: "option2", Label: "Option 2"},
                                    {Value: "option3", Label: "Option 3"},
                                    {Value: "option4", Label: "Option 4"},
                                },
                            })
                        </div>

                        <div class="form-control">
                            <label class="label">
                                <span class="label-text font-medium">Multi-Select with Count</span>
                            </label>
                            @ui.MultiSelect(ui.MultiSelectProps{
                                Placeholder: "Select departments",
                                Options: []ui.MultiSelectOption{
                                    {Value: "tech", Label: "Technology", Selected: true},
                                    {Value: "design", Label: "Design"},
                                    {Value: "marketing", Label: "Marketing", Selected: true},
                                    {Value: "sales", Label: "Sales"},
                                    {Value: "support", Label: "Support"},
                                },
                            })
                        </div>



                        <div class="form-control">
                            <label class="label cursor-pointer justify-start gap-3">
                                @ui.Checkbox(ui.CheckboxProps{
                                    Name: "terms",
                                    Variant: "primary",
                                    Size: "md",
                                })
                                <span class="label-text font-medium">I agree to the terms</span>
                            </label>
                        </div>

                        <div class="form-control">
                            <label class="label cursor-pointer justify-start gap-3">
                                @ui.Radio(ui.RadioProps{
                                    Name: "radio-group",
                                    Value: "option1",
                                    Variant: "primary",
                                    Size: "md",
                                })
                                <span class="label-text font-medium">Option 1</span>
                            </label>
                        </div>
                        
                        <div class="form-control">
                            <label class="label cursor-pointer justify-start gap-3">
                                @ui.Switch(ui.SwitchProps{
                                    Name: "notifications",
                                    Variant: "primary",
                                    Size: "md",
                                })
                                <span class="label-text font-medium">Enable notifications</span>
                            </label>
                        </div>

                        <div class="form-control">
                            <label class="label">
                                <span class="label-text font-medium">Range Slider</span>
                                <span class="label-text-alt">50</span>
                            </label>
                            @ui.Slider(ui.SliderProps{
                                Min: 0,
                                Max: 100,
                                Value: 50,
                                Variant: "primary",
                                Size: "md",
                            })
                        </div>

                        <div class="form-control">
                            <label class="label">
                                <span class="label-text font-medium">File Upload (Standard)</span>
                                <span class="label-text-alt">Images only, max 10MB</span>
                            </label>
                            @ui.FileUpload(ui.FileUploadProps{
                                Accept: "image/*",
                                MaxSize: "Max 10MB",
                                Variant: "primary",
                                Size: "md",
                            })
                        </div>

                        <div class="form-control">
                            <label class="label">
                                <span class="label-text font-medium">Multiple File Upload</span>
                                <span class="label-text-alt">Select multiple files</span>
                            </label>
                            @ui.FileUpload(ui.FileUploadProps{
                                Multiple: true,
                                Variant: "secondary",
                                Size: "md",
                            })
                        </div>

                        <div class="form-control">
                            <label class="label">
                                <span class="label-text font-medium">Drag & Drop Upload</span>
                                <span class="label-text-alt">Drag files here or click to browse</span>
                            </label>
                            @ui.FileUpload(ui.FileUploadProps{
                                DragDrop: true,
                                Accept: "image/*,.pdf,.doc,.docx",
                                MaxSize: "Max 25MB per file",
                                Multiple: true,
                                Variant: "accent",
                                Size: "lg",
                            })
                        </div>


                        <div class="form-control">
                            <label class="label">
                                <span class="label-text font-medium">üìÖ Date Range Picker</span>
                                <span class="label-text-alt">Select start and end dates</span>
                            </label>
                            @ui.DateRange(ui.DateRangeProps{
                                Name: "daterange",
                                Placeholder: "Select date range",
                                Variant: "bordered",
                                Size: "md",
                                Presets: true,
                                Format: "Jan 02, 2006",
                            })
                        </div>

                        <div class="form-control">
                            <label class="label">
                                <span class="label-text font-medium">üìä Date Range (Primary)</span>
                                <span class="label-text-alt">With preset values</span>
                            </label>
                            @ui.DateRange(ui.DateRangeProps{
                                Name: "reporting_range",
                                StartDate: "2024-01-01",
                                EndDate: "2024-01-31",
                                Placeholder: "Select reporting period",
                                Variant: "primary",
                                Size: "lg",
                                Presets: true,
                                Format: "Monday, Jan 02, 2006",
                            })
                        </div>

                        <div class="form-control">
                            <label class="label">
                                <span class="label-text font-medium">üóìÔ∏è Simple Date Range</span>
                                <span class="label-text-alt">Without presets</span>
                            </label>
                            @ui.DateRange(ui.DateRangeProps{
                                Name: "simple_range",
                                Placeholder: "Pick dates",
                                Variant: "secondary",
                                Size: "sm",
                                Presets: false,
                            })
                        </div>

                        <div class="form-control">
                            <label class="label">
                                <span class="label-text font-medium">üïê Time Picker (12-hour)</span>
                                <span class="label-text-alt">With quick presets</span>
                            </label>
                            @ui.TimePicker(ui.TimePickerProps{
                                Name: "meeting_time",
                                Placeholder: "Select meeting time",
                                Variant: "bordered",
                                Size: "md",
                                Format24: false,
                                ShowSeconds: false,
                            })
                        </div>

                        <div class="form-control">
                            <label class="label">
                                <span class="label-text font-medium">‚è∞ Time Picker (24-hour)</span>
                                <span class="label-text-alt">With seconds</span>
                            </label>
                            @ui.TimePicker(ui.TimePickerProps{
                                Name: "schedule_time",
                                Value: "14:30:00",
                                Placeholder: "Set schedule time",
                                Variant: "primary",
                                Size: "lg",
                                Format24: true,
                                ShowSeconds: true,
                            })
                        </div>

                        <div class="form-control">
                            <label class="label">
                                <span class="label-text font-medium">üìÖ Year Picker</span>
                                <span class="label-text-alt">Select graduation year</span>
                            </label>
                            @ui.YearPicker(ui.YearPickerProps{
                                Name: "graduation_year",
                                Placeholder: "Select year",
                                Variant: "accent",
                                Size: "md",
                                MinYear: 1990,
                                MaxYear: 2030,
                            })
                        </div>

                        <div class="form-control">
                            <label class="label">
                                <span class="label-text font-medium">üîí Password with Toggle</span>
                                <span class="label-text-alt">Click eye to reveal</span>
                            </label>
                            @ui.PasswordInput(ui.PasswordInputProps{
                                Name: "password",
                                Placeholder: "Enter your password",
                                Variant: "bordered",
                                Size: "md",
                                ShowToggle: true,
                                ShowStrength: false,
                                MinLength: 8,
                            })
                        </div>

                        <div class="form-control">
                            <label class="label">
                                <span class="label-text font-medium">üõ°Ô∏è Password with Strength</span>
                                <span class="label-text-alt">Real-time strength meter</span>
                            </label>
                            @ui.PasswordInput(ui.PasswordInputProps{
                                Name: "new_password",
                                Placeholder: "Create a strong password",
                                Variant: "primary",
                                Size: "md",
                                ShowToggle: true,
                                ShowStrength: true,
                                MinLength: 12,
                                HelperText: "Include uppercase, lowercase, numbers, and symbols",
                            })
                        </div>

                        <div class="form-control">
                            <label class="label">
                                <span class="label-text font-medium">‚ö†Ô∏è Password with Error</span>
                                <span class="label-text-alt">Error state example</span>
                            </label>
                            @ui.PasswordInput(ui.PasswordInputProps{
                                Name: "confirm_password",
                                Placeholder: "Confirm password",
                                Variant: "error",
                                Size: "md",
                                ShowToggle: true,
                                ShowStrength: false,
                                Error: true,
                                ErrorMsg: "Passwords do not match",
                            })
                        </div>

                        <div class="form-control">
                            <label class="label">
                                <span class="label-text font-medium">üé® Color Picker</span>
                                <span class="label-text-alt">Brand primary color</span>
                            </label>
                            <div class="flex items-center gap-3">
                                @ui.Input(ui.InputProps{
                                    Type: "color",
                                    Variant: "bordered",
                                    Size: "md",
                                    Value: "#21569e",
                                    Class: "w-16 h-10 p-1 cursor-pointer",
                                })
                                <div class="flex items-center gap-2">
                                    <span class="text-sm font-mono text-base-content/70">#21569e</span>
                                    <div class="w-6 h-6 rounded border border-base-300" style="background-color: #21569e;"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
}

templ ButtonComponentsSection() {
    <section class="card bg-gradient-to-br from-base-100 to-base-200 shadow-xl border border-accent/10">
        <div class="card-body">
            <h2 class="card-title text-3xl text-accent mb-6 border-b border-accent/20 pb-2">
                üîò Button Components
            </h2>
            
            <div class="space-y-8">
                <!-- Button Variants -->
                <div class="space-y-4">
                    <h3 class="text-xl font-semibold text-primary">Button Variants</h3>
                    <div class="p-4 bg-base-100 rounded-lg border border-base-300">
                        <div class="flex flex-wrap gap-3">
                            @ui.Button(ui.ButtonProps{Variant: "primary", Size: "md", Type: "button"}) { Primary }
                            @ui.Button(ui.ButtonProps{Variant: "secondary", Size: "md", Type: "button"}) { Secondary }
                            @ui.Button(ui.ButtonProps{Variant: "accent", Size: "md", Type: "button"}) { Accent }
                            @ui.Button(ui.ButtonProps{Variant: "info", Size: "md", Type: "button"}) { Info }
                            @ui.Button(ui.ButtonProps{Variant: "success", Size: "md", Type: "button"}) { Success }
                            @ui.Button(ui.ButtonProps{Variant: "warning", Size: "md", Type: "button"}) { Warning }
                            @ui.Button(ui.ButtonProps{Variant: "error", Size: "md", Type: "button"}) { Error }
                            @ui.Button(ui.ButtonProps{Variant: "ghost", Size: "md", Type: "button"}) { Ghost }
                        </div>
                    </div>
                </div>
                
                <!-- Button Sizes -->
                <div class="space-y-4">
                    <h3 class="text-xl font-semibold text-primary">Button Sizes</h3>
                    <div class="p-4 bg-base-100 rounded-lg border border-base-300">
                        <div class="flex items-center gap-3">
                            @ui.Button(ui.ButtonProps{Variant: "primary", Size: "xs", Type: "button"}) { XS }
                            @ui.Button(ui.ButtonProps{Variant: "primary", Size: "sm", Type: "button"}) { Small }
                            @ui.Button(ui.ButtonProps{Variant: "primary", Size: "md", Type: "button"}) { Medium }
                            @ui.Button(ui.ButtonProps{Variant: "primary", Size: "lg", Type: "button"}) { Large }
                        </div>
                    </div>
                </div>
                
                <!-- Button States -->
                <div class="space-y-4">
                    <h3 class="text-xl font-semibold text-primary">Button States & Styles</h3>
                    <div class="p-4 bg-base-100 rounded-lg border border-base-300 space-y-3">
                        <div class="flex gap-3">
                            @ui.Button(ui.ButtonProps{Variant: "primary", Size: "md", Type: "button"}) { Normal }
                            @ui.Button(ui.ButtonProps{Variant: "primary", Outline: true, Size: "md", Type: "button"}) { Outline }
                            @ui.Button(ui.ButtonProps{Variant: "primary", Disabled: true, Size: "md", Type: "button"}) { Disabled }
                            @ui.Button(ui.ButtonProps{Variant: "primary", Loading: true, Size: "md", Type: "button"}) { Loading }
                        </div>
                        <div class="flex gap-3">
                            @ui.Button(ui.ButtonProps{Variant: "primary", Wide: true, Size: "md", Type: "button"}) { Wide Button }
                            @ui.Button(ui.ButtonProps{Variant: "primary", Circle: true, Size: "md", Type: "button"}) { ‚úï }
                            @ui.Button(ui.ButtonProps{Variant: "primary", Square: true, Size: "md", Type: "button"}) { ‚ñ° }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
}

templ DataDisplaySection() {
    <section class="card bg-gradient-to-br from-base-100 to-base-200 shadow-xl border border-info/10">
        <div class="card-body">
            <h2 class="card-title text-3xl text-info mb-6 border-b border-info/20 pb-2">
                üìä Data Display Components
            </h2>
            
            <div class="space-y-8">
                <!-- Cards -->
                <div class="space-y-4">
                    <h3 class="text-xl font-semibold text-secondary">Cards</h3>
                    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                        @ui.CardWithBody(ui.CardProps{Variant: "bordered", Shadow: "lg"}) {
                            @ui.CardTitle("Simple Card")
                            <p>This is a basic card with some content and a clean border design.</p>
                            @ui.CardActions() {
                                @ui.Button(ui.ButtonProps{Variant: "primary", Size: "sm", Type: "button"}) { Action }
                            }
                        }
                        
                        @ui.CardWithImage(ui.CardProps{Variant: "bordered", Shadow: "lg"}, "https://picsum.photos/400/200", "Sample Image") {
                            @ui.CardTitle("Image Card")
                            <p>Card with beautiful image at the top.</p>
                        }
                        
                        @ui.Card(ui.CardProps{Variant: "bordered", Shadow: "lg", Glass: true}) {
                            <div class="card-body">
                                @ui.CardTitle("Glass Card")
                                <p>A modern glass effect card design.</p>
                            </div>
                        }
                    </div>
                </div>

                <!-- Badges & Avatars -->
                <div class="space-y-4">
                    <h3 class="text-xl font-semibold text-secondary">Badges & Avatars</h3>
                    <div class="p-4 bg-base-100 rounded-lg border border-base-300 space-y-4">
                        <div>
                            <h4 class="font-medium mb-2">Badges</h4>
                            <div class="space-y-3">
                                <div class="flex flex-wrap gap-2">
                                    @ui.Badge(ui.BadgeProps{Variant: "primary", Size: "md"}) { Primary }
                                    @ui.Badge(ui.BadgeProps{Variant: "secondary", Size: "md"}) { Secondary }
                                    @ui.Badge(ui.BadgeProps{Variant: "accent", Size: "md"}) { Accent }
                                    @ui.Badge(ui.BadgeProps{Variant: "success", Size: "md"}) { Success }
                                    @ui.Badge(ui.BadgeProps{Variant: "warning", Size: "md"}) { Warning }
                                    @ui.Badge(ui.BadgeProps{Variant: "error", Size: "md"}) { Error }
                                </div>
                                <div class="flex flex-wrap gap-2">
                                    @ui.Badge(ui.BadgeProps{Variant: "primary", Size: "md", Outline: true}) { Outline }
                                    @ui.Badge(ui.BadgeProps{Variant: "info", Size: "sm"}) { Small Info }
                                    @ui.Badge(ui.BadgeProps{Variant: "success", Size: "lg"}) { Large Success }
                                </div>
                                <div class="flex flex-wrap gap-2 items-center">
                                    <span class="text-sm">Status badges:</span>
                                    @ui.Badge(ui.BadgeProps{Variant: "success", Size: "sm"}) { ‚úì Active }
                                    @ui.Badge(ui.BadgeProps{Variant: "warning", Size: "sm"}) { ‚ö† Pending }
                                    @ui.Badge(ui.BadgeProps{Variant: "error", Size: "sm"}) { ‚úï Inactive }
                                    @ui.Badge(ui.BadgeProps{Variant: "info", Size: "sm"}) { üîÑ Processing }
                                </div>
                            </div>
                        </div>
                        <div>
                            <h4 class="font-medium mb-2">Avatars</h4>
                            <div class="flex items-center gap-4">
                                @ui.Avatar(ui.AvatarProps{
                                    Size: "sm",
                                    Src: "https://picsum.photos/100/100",
                                    Alt: "User Avatar",
                                })
                                @ui.Avatar(ui.AvatarProps{
                                    Size: "md",
                                    Src: "https://picsum.photos/100/100?random=1",
                                    Alt: "User Avatar",
                                    Online: true,
                                })
                                @ui.Avatar(ui.AvatarProps{
                                    Size: "lg",
                                    Initials: "JD",
                                    Shape: "square",
                                })
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Tables -->
                <div class="space-y-4">
                    <h3 class="text-xl font-semibold text-secondary">Tables</h3>
                    <div class="p-4 bg-base-100 rounded-lg border border-base-300">
                        @ui.Table(ui.TableProps{Zebra: true, Size: "md"}) {
                            @ui.TableHeader() {
                                <tr>
                                    @ui.TableHeaderCell() { Name }
                                    @ui.TableHeaderCell() { Email }
                                    @ui.TableHeaderCell() { Role }
                                    @ui.TableHeaderCell() { Status }
                                </tr>
                            }
                            @ui.TableBody() {
                                @ui.TableRowComponent(false, true) {
                                    @ui.TableCell() { John Doe }
                                    @ui.TableCell() { john@example.com }
                                    @ui.TableCell() { Developer }
                                    @ui.TableCell() { 
                                        @ui.Badge(ui.BadgeProps{Variant: "success", Size: "sm"}) { Active }
                                    }
                                }
                                @ui.TableRowComponent(false, true) {
                                    @ui.TableCell() { Jane Smith }
                                    @ui.TableCell() { jane@example.com }
                                    @ui.TableCell() { Designer }
                                    @ui.TableCell() { 
                                        @ui.Badge(ui.BadgeProps{Variant: "warning", Size: "sm"}) { Pending }
                                    }
                                }
                                @ui.TableRowComponent(true, true) {
                                    @ui.TableCell() { Bob Johnson }
                                    @ui.TableCell() { bob@example.com }
                                    @ui.TableCell() { Manager }
                                    @ui.TableCell() { 
                                        @ui.Badge(ui.BadgeProps{Variant: "error", Size: "sm"}) { Inactive }
                                    }
                                }
                            }
                        }
                    </div>
                </div>

                <!-- Lists -->
                <div class="space-y-4">
                    <h3 class="text-xl font-semibold text-secondary">Lists</h3>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div class="p-4 bg-base-100 rounded-lg border border-base-300">
                            <h4 class="font-medium mb-2">Unordered List</h4>
                            @ui.List(ui.ListProps{Ordered: false, Variant: "disc", Spacing: "normal"}) {
                                <li>First item</li>
                                <li>Second item</li>
                                <li>Third item</li>
                                <li>Fourth item</li>
                            }
                        </div>
                        <div class="p-4 bg-base-100 rounded-lg border border-base-300">
                            <h4 class="font-medium mb-2">Ordered List</h4>
                            @ui.List(ui.ListProps{Ordered: true, Variant: "decimal", Spacing: "normal"}) {
                                <li>First step</li>
                                <li>Second step</li>
                                <li>Third step</li>
                                <li>Final step</li>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
}

templ LayoutComponentsSection() {
    <section class="card bg-gradient-to-br from-base-100 to-base-200 shadow-xl border border-success/10">
        <div class="card-body">
            <h2 class="card-title text-3xl text-success mb-6 border-b border-success/20 pb-2">
                üìê Layout Components
            </h2>
            
            <div class="space-y-8">
                <!-- Grid -->
                <div class="space-y-4">
                    <h3 class="text-xl font-semibold text-primary">Grid Layout</h3>
                    <div class="p-4 bg-base-100 rounded-lg border border-base-300">
                        @ui.Grid(ui.GridProps{Cols: "3", Gap: "4"}) {
                            <div class="bg-primary/20 p-4 rounded-lg text-center border border-primary/30">Grid Item 1</div>
                            <div class="bg-secondary/20 p-4 rounded-lg text-center border border-secondary/30">Grid Item 2</div>
                            <div class="bg-accent/20 p-4 rounded-lg text-center border border-accent/30">Grid Item 3</div>
                            <div class="bg-info/20 p-4 rounded-lg text-center border border-info/30">Grid Item 4</div>
                            <div class="bg-success/20 p-4 rounded-lg text-center border border-success/30">Grid Item 5</div>
                            <div class="bg-warning/20 p-4 rounded-lg text-center border border-warning/30">Grid Item 6</div>
                        }
                    </div>
                </div>
                
                <!-- Flex Layout -->
                <div class="space-y-4">
                    <h3 class="text-xl font-semibold text-primary">Flex Layout</h3>
                    <div class="p-4 bg-base-100 rounded-lg border border-base-300">
                        @ui.Flex(ui.FlexProps{Direction: "row", Justify: "center", Align: "center", Gap: "4", Wrap: "wrap"}) {
                            <div class="bg-info/20 p-4 rounded-lg border border-info/30">Flex Item 1</div>
                            <div class="bg-success/20 p-4 rounded-lg border border-success/30">Flex Item 2</div>
                            <div class="bg-warning/20 p-4 rounded-lg border border-warning/30">Flex Item 3</div>
                        }
                    </div>
                </div>
                
                <!-- Stack Layout -->
                <div class="space-y-4">
                    <h3 class="text-xl font-semibold text-primary">Stack Layout</h3>
                    <div class="p-4 bg-base-100 rounded-lg border border-base-300">
                        @ui.Stack(ui.StackProps{Direction: "column", Spacing: "3", Align: "stretch"}) {
                            <div class="bg-primary/10 p-3 rounded-lg border border-primary/20">Stack Item 1</div>  
                            <div class="bg-primary/20 p-3 rounded-lg border border-primary/30">Stack Item 2</div>
                            <div class="bg-primary/30 p-3 rounded-lg border border-primary/40">Stack Item 3</div>
                        }
                    </div>
                </div>

                <!-- Container & Separator -->
                <div class="space-y-4">
                    <h3 class="text-xl font-semibold text-primary">Container & Separator</h3>
                    <div class="p-4 bg-base-100 rounded-lg border border-base-300 space-y-4">
                        @ui.Container(ui.ContainerProps{Size: "md", Centered: true}) {
                            <p class="text-center">This is content inside a centered container component.</p>
                        }
                        @ui.Separator(ui.SeparatorProps{Orientation: "horizontal", Variant: "primary"})
                        <p class="text-center">Content after separator</p>
                        
                                                <div class="mt-4">
                            <h4 class="font-medium mb-2">Dividers & Separators</h4>
                            <div class="space-y-6">
                                <div>
                                    <h5 class="text-sm font-medium mb-2">Horizontal Dividers</h5>
                                    <div class="space-y-3">
                                        <div>Simple content above</div>
                                        @ui.Divider(ui.DividerProps{Orientation: "horizontal", Variant: "neutral"})
                                        <div>Content between dividers</div>
                                        @ui.DividerWithText(ui.DividerProps{Orientation: "horizontal", Variant: "primary"}, "OR")
                                        <div>Content below with text divider</div>
                                    </div>
                                </div>
                                <div>
                                    <h5 class="text-sm font-medium mb-2">Vertical Separator</h5>
                                    <div class="flex items-center gap-4 min-h-[60px]">
                                        <div class="text-center">Left Content</div>
                                        @ui.Separator(ui.SeparatorProps{Orientation: "vertical", Variant: "primary"})
                                        <div class="text-center">Right Content</div>
                                        @ui.SeparatorWithText(ui.SeparatorProps{Orientation: "vertical", Variant: "secondary"}, "OR")
                                        <div class="text-center">More Content</div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="mt-4">
                            <h4 class="font-medium mb-2">Toggle & Form Elements</h4>
                            <div class="space-y-3">
                                <div class="form-control">
                                    @ui.LabelWithText(ui.LabelProps{}, "Toggle Switch")
                                    @ui.Toggle(ui.ToggleProps{Name: "toggle1", Variant: "primary", Size: "md"})
                                </div>
                                <div class="form-control">
                                    @ui.LabelWithText(ui.LabelProps{Required: true}, "Required Form Field")
                                    @ui.Input(ui.InputProps{Type: "text", Placeholder: "Enter value", Variant: "bordered", Size: "md"})
                                    <div class="label">
                                        <span class="label-text-alt">This is additional information about the field</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
}

templ TypographySection() {
    <section class="card bg-gradient-to-br from-base-100 to-base-200 shadow-xl border border-warning/10">
        <div class="card-body">
            <h2 class="card-title text-3xl text-warning mb-6 border-b border-warning/20 pb-2">
                ‚úçÔ∏è Typography Components
            </h2>
            
            <div class="space-y-8">
                <!-- Headings -->
                <div class="space-y-4">
                    <h3 class="text-xl font-semibold text-accent">Headings</h3>
                    <div class="p-4 bg-base-100 rounded-lg border border-base-300 space-y-3">
                        @ui.H1(ui.HeadingProps{Color: "primary"}) { Heading 1 }
                        @ui.H2(ui.HeadingProps{Color: "secondary"}) { Heading 2 }
                        @ui.H3(ui.HeadingProps{Color: "accent"}) { Heading 3 }
                        @ui.H4(ui.HeadingProps{}) { Heading 4 }
                        @ui.H5(ui.HeadingProps{}) { Heading 5 }
                        @ui.H6(ui.HeadingProps{}) { Heading 6 }
                    </div>
                </div>

                <!-- Text Components -->
                <div class="space-y-4">
                    <h3 class="text-xl font-semibold text-accent">Text Components</h3>
                    <div class="p-4 bg-base-100 rounded-lg border border-base-300 space-y-3">
                        @ui.Paragraph(ui.TextProps{Size: "base"}) {
                            This is a regular paragraph with normal text styling and proper spacing.
                        }
                        @ui.Text(ui.TextProps{Size: "lg", Weight: "bold", Color: "text-primary"}) {
                            Large bold primary text
                        }
                        @ui.Text(ui.TextProps{Size: "sm", Italic: true, Color: "text-base-content/70"}) {
                            Small italic muted text
                        }
                        @ui.Strong(ui.TextProps{}) { Strong text emphasis }
                        @ui.Em(ui.TextProps{}) { Emphasized italic text }
                        @ui.Code(ui.TextProps{}) { inline code snippet }
                    </div>
                </div>

                <!-- Quotes -->
                <div class="space-y-4">
                    <h3 class="text-xl font-semibold text-accent">Quotes</h3>
                    <div class="p-4 bg-base-100 rounded-lg border border-base-300 space-y-4">
                        @ui.Quote(ui.QuoteProps{Author: "Albert Einstein", Variant: "bordered", Size: "lg"}) {
                            Imagination is more important than knowledge.
                        }
                        @ui.TestimonialQuote(ui.QuoteProps{Author: "Jane Doe", Source: "CEO, TechCorp"}) {
                            This UI library has transformed how we build our applications. Highly recommended!
                        }
                    </div>
                </div>
            </div>
        </div>
    </section>
}

templ FeedbackSection() {
    <section class="card bg-gradient-to-br from-base-100 to-base-200 shadow-xl border border-error/10">
        <div class="card-body">
            <h2 class="card-title text-3xl text-error mb-6 border-b border-error/20 pb-2">
                üí¨ Feedback Components
            </h2>
            
            <div class="space-y-8">
                <!-- Alerts -->
                <div class="space-y-4">
                    <h3 class="text-xl font-semibold text-secondary">Alerts</h3>
                    <div class="p-4 bg-base-100 rounded-lg border border-base-300 space-y-3">
                        @ui.Alert(ui.AlertProps{Type: "info"}) {
                            Info alert! You have a new message waiting for you.
                        }
                        @ui.Alert(ui.AlertProps{Type: "success"}) {
                            Success! Your purchase has been confirmed and processed.
                        }
                        @ui.Alert(ui.AlertProps{Type: "warning"}) {
                            Warning! Please check your input data before proceeding.
                        }
                        @ui.Alert(ui.AlertProps{Type: "error"}) {
                            Error! Something went wrong. Please try again later.
                        }
                    </div>
                </div>

                <!-- Progress & Loading -->
                <div class="space-y-4">
                    <h3 class="text-xl font-semibold text-secondary">Progress & Loading</h3>
                    <div class="p-4 bg-base-100 rounded-lg border border-base-300 space-y-4">
                        <div>
                            <h4 class="font-medium mb-2">Progress Bars - Standard Thickness</h4>
                            <div class="space-y-3">
                                @ui.ProgressWithLabel(ui.ProgressProps{Value: 25, Max: 100, Variant: "primary", ShowText: false, Size: "md"}, "Upload Progress")
                                @ui.Progress(ui.ProgressProps{Value: 60, Max: 100, Variant: "secondary", ShowText: true, Animated: true, Size: "md"})
                                @ui.Progress(ui.ProgressProps{Value: 85, Max: 100, Variant: "success", ShowText: true, Striped: true, Size: "md"})
                            </div>
                        </div>
                        
                        <div>
                            <h4 class="font-medium mb-2">Progress Bars - Thick & Extra Thick</h4>
                            <div class="space-y-3">
                                @ui.ProgressWithLabel(ui.ProgressProps{Value: 40, Max: 100, Variant: "info", ShowText: true, Size: "lg"}, "Download Progress (Thick)")
                                @ui.Progress(ui.ProgressProps{Value: 70, Max: 100, Variant: "warning", ShowText: true, Animated: true, Size: "xl"})
                                @ui.Progress(ui.ProgressProps{Value: 90, Max: 100, Variant: "accent", ShowText: true, Striped: true, Animated: true, Size: "xl"})
                            </div>
                        </div>
                        
                        <div>
                            <h4 class="font-medium mb-2">Animated Progress Variations</h4>
                            <div class="space-y-3">
                                @ui.Progress(ui.ProgressProps{Value: 45, Max: 100, Variant: "primary", ShowText: true, Animated: true, Size: "lg", Text: "Processing..."})
                                @ui.Progress(ui.ProgressProps{Value: 75, Max: 100, Variant: "secondary", ShowText: false, Striped: true, Animated: true, Size: "lg"})
                            </div>
                            <div class="mt-4 flex justify-center">
                                @ui.CircularProgress(ui.ProgressProps{Value: 75, Max: 100, Variant: "accent", ShowText: true})
                            </div>
                        </div>
                        
                        <div>
                            <h4 class="font-medium mb-2">Loading Spinners</h4>
                            <div class="flex flex-wrap gap-4 items-center">
                                @ui.Spinner(ui.SpinnerProps{Size: "md", Variant: "primary"})
                                @ui.DotSpinner(ui.SpinnerProps{Size: "md", Variant: "secondary"})
                                @ui.PulseSpinner(ui.SpinnerProps{Size: "md", Variant: "accent"}) 
                                @ui.BarSpinner(ui.SpinnerProps{Size: "md", Variant: "info"})
                            </div>
                            <div class="mt-3">
                                @ui.SpinnerWithText(ui.SpinnerProps{Size: "sm", Variant: "primary"}, "Loading...")
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Skeleton -->
                <div class="space-y-4">
                    <h3 class="text-xl font-semibold text-secondary">Skeleton Loading</h3>
                    <div class="p-4 bg-base-100 rounded-lg border border-base-300 space-y-6">
                        <div>
                            <h4 class="font-medium mb-2">Text Skeleton</h4>
                            @ui.SkeletonText(3, ui.SkeletonProps{})
                        </div>
                        <div>
                            <h4 class="font-medium mb-2">Card Skeleton</h4>
                            @ui.SkeletonCard(ui.SkeletonProps{})
                        </div>
                        <div>
                            <h4 class="font-medium mb-2">List Skeleton</h4>
                            @ui.SkeletonList(3)
                        </div>
                        <div>
                            <h4 class="font-medium mb-2">Image & Avatar Skeleton</h4>
                            <div class="flex items-center space-x-4">
                                @ui.SkeletonAvatar("md", "circle")
                                @ui.SkeletonAvatar("md", "square")
                                @ui.SkeletonImage(ui.SkeletonProps{Width: "w-24", Height: "h-16", Rounded: "lg"})
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
}

templ InteractiveSection() {
    <section class="card bg-gradient-to-br from-base-100 to-base-200 shadow-xl border border-neutral/10">
        <div class="card-body">
            <h2 class="card-title text-3xl text-neutral mb-6 border-b border-neutral/20 pb-2">
                üéÆ Interactive Components
            </h2>
            
            <div class="space-y-8">
                <!-- Images -->
                <div class="space-y-4">
                    <h3 class="text-xl font-semibold text-primary">Images</h3>
                    <div class="p-4 bg-base-100 rounded-lg border border-base-300">
                        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                            @ui.Image(ui.ImageProps{
                                Src: "https://picsum.photos/300/200",
                                Alt: "Sample Image",
                                Width: "300",
                                Height: "200",
                                Rounded: "lg",
                                Shadow: "lg",
                            })
                            @ui.Image(ui.ImageProps{
                                Src: "https://picsum.photos/300/200?random=1",
                                Alt: "Round Image",
                                Width: "200",
                                Height: "200",
                                Rounded: "full",
                                Shadow: "xl",
                            })
                            @ui.Image(ui.ImageProps{
                                Src: "https://picsum.photos/300/200?random=2",
                                Alt: "Bordered Image",
                                Width: "300",
                                Height: "200",
                                Shadow: "md",
                            })
                        </div>
                    </div>
                </div>

                <!-- Icons -->
                <div class="space-y-4">
                    <h3 class="text-xl font-semibold text-primary">Icons</h3>
                    <div class="p-4 bg-base-100 rounded-lg border border-base-300">
                        <div class="flex gap-4">
                            @ui.Icon(ui.IconProps{Name: "home", Size: "6", Color: "text-primary"}) {
                                <path d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"/>
                            }
                            @ui.Icon(ui.IconProps{Name: "user", Size: "6", Color: "text-secondary"}) {
                                <path d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
                            }
                            @ui.Icon(ui.IconProps{Name: "heart", Size: "6", Color: "text-error"}) {
                                <path d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"/>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
} 